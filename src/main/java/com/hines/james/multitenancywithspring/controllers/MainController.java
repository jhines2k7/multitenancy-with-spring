package com.hines.james.multitenancywithspring.controllers;

import com.hines.james.multitenancywithspring.entities.User;
import com.hines.james.multitenancywithspring.multitenancy.core.ThreadLocalStorage;
import com.hines.james.multitenancywithspring.properties.DataSourceProperties;
import com.hines.james.multitenancywithspring.properties.MultitenancyDataSource;
import com.hines.james.multitenancywithspring.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired
    private DataSourceProperties dataSourceProperties;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email, @RequestHeader HttpHeaders headers) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setName(name);
        n.setEmail(email);

        for (MultitenancyDataSource multitenancyDataSource: dataSourceProperties.getDataSources()) {
            if(!multitenancyDataSource.getName().equals("userdb3")){
                ThreadLocalStorage.setTenantName(multitenancyDataSource.getName());

                userRepository.save(n);
            }
        }

        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers(@RequestHeader HttpHeaders headers) {
        ThreadLocalStorage.setTenantName(headers.get("x-tenantid").get(0));
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
